# -*- mode:org; mode:visual-line; coding:utf-8; -*-
GDB (the [[http://sourceware.org/gdb/][GNU Debugger]]) Pretty Printers for [[http://boost.org][Boost]]

Since version 7.0 GDB has Python scripting support. This can be used to provide "Pretty Printers" to make the output of GDB more usable. The libstdc++ project currently provides a set of pretty printers for their implementation of the C++ standard library. This projects goal is to provide a similar set of pretty printers for the Boost library.

Help is appreciated!

See supported.txt for supported classes and names of contributors.

The pretty printers are licensed under the terms of the [[http://www.boost.org/users/license.html][Boost Software License, version 1.0]].

* Installation:
GDB version 7 or better is required!

Check out the git repository
#+BEGIN_EXAMPLE
  git clone git://github.com/ruediger/Boost-Pretty-Printer.git
#+END_EXAMPLE

and add the following lines to your =~/.gdbinit=

#+BEGIN_EXAMPLE
python
import sys
sys.path.insert(0, 'PATH-TO-THE-REPO/Boost-Pretty-Printer')
import boost_print
boost_print.register_printers()
end
#+END_EXAMPLE

and of course replace =PATH-TO-THE-REPO= with the absolute path to the Boost Pretty Printer repository. If you have no =~/.gdbinit= file just create it.

Now you can simply use GDB's print (short p) statement to pretty print the supported boost objects.

* Example
#+BEGIN_EXAMPLE
  $ cat > foo.c++
  #include <boost/range/iterator_range.hpp>
  using namespace boost;

  int main() {
    char buf[] = "Hello World";
    iterator_range<char const*> range(buf, buf + sizeof(buf));

    return range[0];
  }
  ^D
  $ g++ -g3 foo.c++
  $ gdb -q a.out
  Reading symbols from /home/ruediger/develop/demos/a.out...done.
  (gdb) break 7
  Breakpoint 1 at 0x4006cb: file /home/ruediger/develop/demos/foo.c++, line 7.
  (gdb) run
  Starting program: /home/ruediger/develop/demos/a.out

  Breakpoint 1, main () at /home/ruediger/develop/demos/foo.c++:8
  8         return range[0];
  (gdb) p range
  $1 = boost::iterator_range<char const*> of length 12 = {72 'H', 101 'e', 108 'l', 108 'l', 111 'o', 32 ' ', 87 'W', 111 'o', 114 'r', 108 'l', 100 'd', 0 '\000'}
#+END_EXAMPLE

* GDB Subprinters and Version Numbers
Recent versions of gdb allow the user to list, enable, and disable individual printers and subprinters.
For more information, see the [[https://sourceware.org/gdb/onlinedocs/gdb/Pretty-Printing.html][GDB documentation]].
This python module installs a single top-level printer called =boost=, and individual subprinters for the various supported types.
Each individual subprinter comes with a version number corresponding to the boost version number that it was designed for.
As boost evolves, older printers might stop working.

* Multi_Index_Container
The printer included here can only print Ordered (Unique or Non-Unique) and Sequenced indexes.
Hashed and Random-Access indexes are not currently supported, though with the default settings, the printer
will capture them and display an appropriate message.
It is possible to specify which index to use for printing a specific container dynamically, from inside GDB.
See the =examples= folder.

* Bypass Traits-Related Errors

Certain containers (notably, intrusive) are heavily customized using traits
classes, and without access to those, one cannot print the containers reliably.
Unfortunately, gdb is occasionally missing crucial inner typedefs.  E.g., in
my tests I usually don't see the =node_traits= typedef inside various
=value_traits= classes. To work around this limitation, this package provides a
way to bypass the inner type resolution from inside gdb by using the variable
=boost_print.bypass_inner_type=.

Another complication is due to the fact that several builtin value- and
node-traits classes are poorly suited to work with gdb inferior variables
(living in gdb memory but not in program memory). A function taking a reference
parameter (even const reference) cannot work with inferior variables.  This
package also provides a way to bypass (rewrite) certain functions from inside
gdb, using the variable =boost_print.bypass_static_method=.

For example usage of this bypass mechanism, see the =test-intrusive= example
(code and gdb commands).

* Trivial Printers

This package also provides a convenient way to define trivial printers from
inside gdb.  For example, suppose the type =SomeType= contains a field =height=,
and we want to print =v.height= instead of =v= for objects of type =SomeType=.
This can be achieved as follows:

#+BEGIN_EXAMPLE
  py boost_print.add_trivial_printer("SomeType", lambda v: v['height'])
#+END_EXAMPLE

The printer can be subsequently disabled with:
#+BEGIN_EXAMPLE
  disable pretty-print global trivial;SomeType
#+END_EXAMPLE
